5547 일루미네이션

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.StringTokenizer;

/*
이동 가능한 대각방향이 R값에 따라 달라진다
1. 테두리 씌워서 벽에 둘러싸인 빈칸을 먼저 알아낸다
2. 건물에 대한 탐색 진행하며 벽의 개수 센다
 */

/*
위의 1을 굳이 할 필요 없다
0을 기준으로 탐색하면서 1을 만날떄 ans += 1 하는 게 코드가 훨씬 깔끔

"1이 0을 만났을 때 더한다" 에서 "0이 1을 만났을 때 더한다"로 바뀐다는 뜻
 */

class Pair {
    int r, c;
    Pair(int r, int c) {
        this.r = r;
        this.c = c;
    }
}

public class Main {
    static BufferedReader br;
    static StringTokenizer st;
    static int R, C, ans;
    static int[][] map;
    static boolean[][] check;

    static int[] rArr = {-1, 1, 0, 0};  // 여섯 방향 체크
    static int[] cArr = {0, 0, -1, 1};
    static int[][] leftDiagonal = {{-1, -1}, {1, -1}};  // 왼쪽 대각 체크
    static int[][] rightDiagonal = {{-1, 1}, {1, 1}};   // 오른쪽 대각 체크

/*
0 0 0 0 0 0 0 0 0 0
0 0 1 0 1 0 1 1 1 0
0 0 1 1 0 0 1 0 0 0
0 1 0 1 0 1 1 1 1 0
0 0 1 1 0 1 0 1 0 0
0 0 0 0 0 0 0 0 0 0

 */
/**
 * 1. 사전 탐색
 * 2. 본 탐색
 * 두 프로세스로 나눠서 문제 해결!
 *
 * 사실은 이렇게 둘로 나눌 필요 없이.
 * 사전탐색 단계에서 0인 녀석들에 대해서만 탐색을 진행하면서
 * 1을 만났을때 벽의 개수를 체크해버리면 됨
 *
 * 벽이 세워지는 경우?
 * 빈칸과 건물칸이 만났을떄 벽이 세워진다.
 *
 * 그럼 굳이 건물 기준으로 탐색하면서 빈칸을 만났을떄 벽을 세우는게 아니라
 * 빈칸 기준으로 탐색하면서 건물을 만났을떄 벽을 세워도 결국 그게 그거다.
 *
 * 그럼 건물로 감싸져있는 빈칸은 어떻게 함??
 * 이건 신경쓸필요가없지. 왜냐하면 0인 칸에 대해서만 탐색활거니까
 * 건물로 감싸져있는 빈칸은 애초에 도달할 수가 없다.
 *
 * 대신에 이 탐색을 모든 0인 칸에 대해서 하는 게 아니라,
 * 테두리로 추가된 새로운 0인 칸들에 대해서"만" 탐색을 진행해야하는 것이다.
 *
 */



    /**
     * 기존에 입력받은 맵을 0으로 감싼 상황인데,
     *
     * 그 새롭게 들어온 테두리들. 그녀석들에 대해서 사전 탐색을 먼저 진행합니다.
     * 사전탐색을 진행하는데, 1(건물)인 녀석들에 대해서 탐색하는게 아니라
     * 0(빈칸)인 녀석들에 대해서 사전탐색을 진행하는거죠
     *
     * 사전 탐색을 하면서 만날 수 있는 빈칸들에 대해서 따로 표시를 해놓는다.
     * 이렇게 먼저 진행한다음에 내가 처음에 말한 여섯방향 탐색을 한다면?
     *
     *
     */


    /**
     * 현재 좌표에서 육각형 각 방향으로 총 여섯방향을 탐색해야 한다.
     * 1. 양옆은 그냥 양옆
     * 2. 짝수행일떄
     *   2.1 위아래는 육각형 상에서 오른쪽 대각선
     *   2.2 남은 것은 왼쪽 대각선
     *
     * 3. 홀수행일때
     *   3.1 위아래는 육각형 상에서 왼쪽 대각선
     *   3.2 남은 것은 오른쪽 대각선
     */


    /**
     *
     * 잊지 말아야할 점
     * 총 여섯방향 탐색을 어떻게할지는 짝수행,홀수행 여부에 따라 달라진다
     *
     */
    public static void dfs(int r, int c) {
        int nr = 0, nc = 0;
        for(int i = 0; i < 2; i++) {  // 이 for문이 대각 이동 처리하는 for문
            if(r % 2 == 0) {  // 왼쪽 대각 이동 가능
                nr = r + leftDiagonal[i][0];
                nc = c + leftDiagonal[i][1];
            }else {  // 오른쪽 대각 이동 가능
                nr = r + rightDiagonal[i][0];
                nc = c + rightDiagonal[i][1];
            }

            if(-1 < nr && nr < R+2 && -1 < nc && nc < C+2 &&
                    map[nr][nc] == 0 && !check[nr][nc]) {
                map[nr][nc] = 2;  // 2인 좌표 == 건물 바깥의 빈칸
                check[nr][nc] = true;
                dfs(nr, nc);
            }
        }

        /**
         * 대각 이동 끝났으니까 나머지 4개의 좌표
         *
         * */

        // 따로 행수 확인 안 하고 그냥 상하좌우 검사한것
        for(int i = 0; i < 4; i++) {
            nr = r + rArr[i];
            nc = c + cArr[i];
            if(-1 < nr && nr < R+2 && -1 < nc && nc < C+2 &&
                    map[nr][nc] == 0 && !check[nr][nc]) {
                map[nr][nc] = 2;  // 2인 좌표 == 건물 바깥의 빈칸
                check[nr][nc] = true;
                dfs(nr, nc);
            }
        }
    }

    public static void bfs(int r, int c) {
        Queue<Pair> que = new ArrayDeque<>();
        check[r][c] = true;
        que.add(new Pair(r, c));

        int nr = 0, nc = 0;
        while(!que.isEmpty()) {
            Pair p = que.poll();

            for(int i = 0; i < 2; i++) {
                if(p.r % 2 == 0) {  // 왼쪽 대각 이동 가능
                    nr = p.r + leftDiagonal[i][0];
                    nc = p.c + leftDiagonal[i][1];
                }else {  // 오른쪽 대각 이동 가능
                    nr = p.r + rightDiagonal[i][0];
                    nc = p.c + rightDiagonal[i][1];
                }

                if(1 <= nr && nr <= R && 1 <= nc && nc <= C) {
                    if(map[nr][nc] != 2 && !check[nr][nc]) {  // 건물, 건물 안의 빈칸 만났을 때는 그냥 탐색 이어간다
                        check[nr][nc] = true;
                        que.add(new Pair(nr, nc));
                    }else if(map[nr][nc] == 2) {  // 건물 바깥의 빈칸을 만난 경우
                        ans += 1;
                    }
                }else {  // 범위 바깥을 만난 경우
                    ans += 1;
                }

                // 이 두 경우에만 ans ++ 체크해준다
            }

            for(int i = 0; i < 4; i++) {
                nr = p.r + rArr[i];
                nc = p.c + cArr[i];
                if(1 <= nr && nr <= R && 1 <= nc && nc <= C) {
                    if(map[nr][nc] != 2 && !check[nr][nc]) {
                        check[nr][nc] = true;
                        que.add(new Pair(nr, nc));
                    }else if(map[nr][nc] == 2) {
                        ans += 1;
                    }
                }else {
                    ans += 1;
                }
            }
        }
    }

    public static void main(String[] args) throws IOException {
        br = new BufferedReader(new InputStreamReader(System.in));
        st = new StringTokenizer(br.readLine());

        C = Integer.parseInt(st.nextToken());
        R = Integer.parseInt(st.nextToken());
        map = new int[R+2][C+2];  // +2 해주는 이유?
        check = new boolean[R+2][C+2];

        for(int i = 1; i <= R; i++) {
            st = new StringTokenizer(br.readLine());
            for(int j = 1; j <= C; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        /**
         * R = 4
         * C = 8
         *
         * [1][1] ~ [4][8] 까지가 진짜 맵이고
         * [0][0] 은 테두리.
         * [5][9] 도 테두리
         *
         *
         * */


        map[0][0] = 2;  // 사전탐색에서 도달할 수 있는 빈칸은 전부 다 2로 바꿔버린다
        check[0][0] = true;
        dfs(0, 0);

        // 건물 바깥 빈칸 전부 체크된 상태

        for(int i = 1; i <= R; i++) {
            for(int j = 1; j <= C; j++) {
                if(map[i][j] != 2 && !check[i][j]) {
                    bfs(i, j);
                }
            }
        }

        System.out.println(ans);
    }
}